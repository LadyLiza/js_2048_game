{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.boardState = this.initialState.map((row)=>row.slice());\n        this.currentStatus = this.gameStatus.idle;\n        this.currentScore = 0;\n    }\n    moveUp() {\n        if (this.currentStatus === this.gameStatus.playing) {\n            let hasMoved = false;\n            for(let column = 0; column < 4; column++){\n                const valuesOfColumn = [];\n                for(let row = 0; row < 4; row++)if (this.boardState[row][column] !== 0) valuesOfColumn.push(this.boardState[row][column]);\n                for(let i = 0; i < valuesOfColumn.length; i++)if (valuesOfColumn[i] === valuesOfColumn[i + 1]) {\n                    valuesOfColumn[i] *= 2;\n                    valuesOfColumn[i + 1] = 0;\n                    this.currentScore += valuesOfColumn[i];\n                    hasMoved = true;\n                }\n                const newColumn = valuesOfColumn.filter((value)=>value !== 0);\n                while(newColumn.length < 4)newColumn.push(0);\n                for(let row = 0; row < 4; row++)if (this.boardState[row][column] !== newColumn[row]) {\n                    this.boardState[row][column] = newColumn[row];\n                    hasMoved = true;\n                }\n            }\n            if (hasMoved) {\n                this.addTile();\n                this.checkStatus();\n            }\n        }\n    }\n    moveDown() {\n        if (this.currentStatus === this.gameStatus.playing) {\n            let hasMoved = false;\n            for(let column = 0; column < 4; column++){\n                const valuesOfColumn = [];\n                for(let row = 3; row >= 0; row--)if (this.boardState[row][column] !== 0) valuesOfColumn.push(this.boardState[row][column]);\n                for(let i = 0; i < valuesOfColumn.length; i++)if (valuesOfColumn[i] === valuesOfColumn[i + 1]) {\n                    valuesOfColumn[i] *= 2;\n                    valuesOfColumn[i + 1] = 0;\n                    this.currentScore += valuesOfColumn[i];\n                    hasMoved = true;\n                }\n                const newColumn = valuesOfColumn.filter((value)=>value !== 0);\n                while(newColumn.length < 4)newColumn.push(0);\n                for(let row = 0; row < 4; row++)if (this.boardState[row][column] !== newColumn[3 - row]) {\n                    this.boardState[row][column] = newColumn[3 - row];\n                    hasMoved = true;\n                }\n            }\n            if (hasMoved) {\n                this.addTile();\n                this.checkStatus();\n            }\n        }\n    }\n    moveLeft() {\n        if (this.currentStatus === this.gameStatus.playing) {\n            let hasMoved = false;\n            for(let row = 0; row < 4; row++){\n                const valuesOfRows = [];\n                for(let column = 0; column < 4; column++)if (this.boardState[row][column] !== 0) valuesOfRows.push(this.boardState[row][column]);\n                for(let i = 0; i < valuesOfRows.length; i++)if (valuesOfRows[i] === valuesOfRows[i + 1]) {\n                    valuesOfRows[i] *= 2;\n                    valuesOfRows[i + 1] = 0;\n                    this.currentScore += valuesOfRows[i];\n                    hasMoved = true;\n                }\n                const newRow = valuesOfRows.filter((value)=>value !== 0);\n                while(newRow.length < 4)newRow.push(0);\n                for(let column = 0; column < 4; column++)if (this.boardState[row][column] !== newRow[column]) {\n                    this.boardState[row][column] = newRow[column];\n                    hasMoved = true;\n                }\n            }\n            if (hasMoved) {\n                this.addTile();\n                this.checkStatus();\n            }\n        }\n    }\n    moveRight() {\n        if (this.currentStatus === this.gameStatus.playing) {\n            let hasMoved = false;\n            for(let row = 0; row < 4; row++){\n                const valuesOfRows = [];\n                for(let column = 3; column >= 0; column--)if (this.boardState[row][column] !== 0) valuesOfRows.push(this.boardState[row][column]);\n                for(let i = 0; i < valuesOfRows.length; i++)if (valuesOfRows[i] === valuesOfRows[i + 1]) {\n                    valuesOfRows[i] *= 2;\n                    valuesOfRows[i + 1] = 0;\n                    this.currentScore += valuesOfRows[i];\n                    hasMoved = true;\n                }\n                const newRow = valuesOfRows.filter((value)=>value !== 0);\n                while(newRow.length < 4)newRow.push(0);\n                for(let column = 0; column < 4; column++)if (this.boardState[row][column] !== newRow[3 - column]) {\n                    this.boardState[row][column] = newRow[3 - column];\n                    hasMoved = true;\n                }\n            }\n            if (hasMoved) {\n                this.addTile();\n                this.checkStatus();\n            }\n        }\n    }\n    getScore() {\n        return this.currentScore;\n    }\n    getState() {\n        return this.boardState;\n    }\n    getStatus() {\n        return this.currentStatus;\n    }\n    start() {\n        this.currentStatus = this.gameStatus.playing;\n        this.addTile();\n        this.addTile();\n    }\n    restart() {\n        this.currentStatus = this.gameStatus.idle;\n        this.boardState = this.initialState.map((row)=>row.slice());\n        this.currentScore = 0;\n    }\n    addTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let column = 0; column < 4; column++)if (this.boardState[row][column] === 0) emptyTiles.push([\n                row,\n                column\n            ]);\n        }\n        if (emptyTiles.length > 0) {\n            const [randomRow, randomColumn] = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.boardState[randomRow][randomColumn] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkStatus() {\n        let hasMoves = false;\n        let hasEmptyTiles = false;\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            if (this.boardState[row][column] === 2048) {\n                this.currentStatus = this.gameStatus.win;\n                return;\n            }\n            if (this.boardState[row][column] === 0) hasEmptyTiles = true;\n            if (row < 3 && this.boardState[row][column] === this.boardState[row + 1][column] || column < 3 && this.boardState[row][column] === this.boardState[row][column + 1]) hasMoves = true;\n        }\n        if (!hasEmptyTiles && !hasMoves) this.currentStatus = this.gameStatus.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    } else if ($09e991522ca7e64e$var$startButton.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n    }\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$updateScoreDisplay();\n});\nfunction $09e991522ca7e64e$var$updateScoreDisplay() {\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateGameMessage() {\n    if ($09e991522ca7e64e$var$game.getStatus() === $09e991522ca7e64e$var$game.gameStatus.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === $09e991522ca7e64e$var$game.gameStatus.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$updateGameField() {\n    $09e991522ca7e64e$var$gameField.innerHTML = \"\";\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < state.length; row++){\n        const tableRow = document.createElement(\"tr\");\n        for(let column = 0; column < state[row].length; column++){\n            const tableCell = document.createElement(\"td\");\n            const cellValue = state[row][column];\n            tableCell.textContent = cellValue !== 0 ? cellValue : \"\";\n            tableCell.classList.add(\"field-cell\");\n            if (cellValue !== 0) tableCell.classList.add(`field-cell--${cellValue}`);\n            tableRow.appendChild(tableCell);\n        }\n        $09e991522ca7e64e$var$gameField.appendChild(tableRow);\n    }\n}\nfunction $09e991522ca7e64e$var$handleKeyPress() {\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyInput);\n}\nfunction $09e991522ca7e64e$var$handleKeyInput(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$updateScoreDisplay();\n    $09e991522ca7e64e$var$updateGameMessage();\n}\n$09e991522ca7e64e$var$handleKeyPress();\n\n\n//# sourceMappingURL=index.f18a68c2.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst gameField = document.querySelector('.game-field');\nconst scoreDisplay = document.querySelector('.game-score');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.textContent === 'Start') {\n    game.start();\n    startMessage.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n  } else if (startButton.textContent === 'Restart') {\n    game.restart();\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    startButton.textContent = 'Start';\n    startButton.classList.add('start');\n    startButton.classList.remove('restart');\n    startMessage.classList.remove('hidden');\n  }\n  updateGameField();\n  updateScoreDisplay();\n});\n\nfunction updateScoreDisplay() {\n  scoreDisplay.textContent = game.getScore();\n}\n\nfunction updateGameMessage() {\n  if (game.getStatus() === game.gameStatus.win) {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === game.gameStatus.lose) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction updateGameField() {\n  gameField.innerHTML = '';\n\n  const state = game.getState();\n\n  for (let row = 0; row < state.length; row++) {\n    const tableRow = document.createElement('tr');\n\n    for (let column = 0; column < state[row].length; column++) {\n      const tableCell = document.createElement('td');\n      const cellValue = state[row][column];\n\n      tableCell.textContent = cellValue !== 0 ? cellValue : '';\n      tableCell.classList.add('field-cell');\n\n      if (cellValue !== 0) {\n        tableCell.classList.add(`field-cell--${cellValue}`);\n      }\n      tableRow.appendChild(tableCell);\n    }\n    gameField.appendChild(tableRow);\n  }\n}\n\nfunction handleKeyPress() {\n  document.addEventListener('keydown', handleKeyInput);\n}\n\nfunction handleKeyInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    default:\n      break;\n  }\n  updateGameField();\n  updateScoreDisplay();\n  updateGameMessage();\n}\n\nhandleKeyPress();\n","'use strict';\n\nclass Game {\n  gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.boardState = this.initialState.map((row) => row.slice());\n    this.currentStatus = this.gameStatus.idle;\n    this.currentScore = 0;\n  }\n\n  moveUp() {\n    if (this.currentStatus === this.gameStatus.playing) {\n      let hasMoved = false;\n\n      for (let column = 0; column < 4; column++) {\n        const valuesOfColumn = [];\n\n        for (let row = 0; row < 4; row++) {\n          if (this.boardState[row][column] !== 0) {\n            valuesOfColumn.push(this.boardState[row][column]);\n          }\n        }\n\n        for (let i = 0; i < valuesOfColumn.length; i++) {\n          if (valuesOfColumn[i] === valuesOfColumn[i + 1]) {\n            valuesOfColumn[i] *= 2;\n            valuesOfColumn[i + 1] = 0;\n            this.currentScore += valuesOfColumn[i];\n            hasMoved = true;\n          }\n        }\n\n        const newColumn = valuesOfColumn.filter((value) => value !== 0);\n\n        while (newColumn.length < 4) {\n          newColumn.push(0);\n        }\n\n        for (let row = 0; row < 4; row++) {\n          if (this.boardState[row][column] !== newColumn[row]) {\n            this.boardState[row][column] = newColumn[row];\n            hasMoved = true;\n          }\n        }\n      }\n\n      if (hasMoved) {\n        this.addTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.currentStatus === this.gameStatus.playing) {\n      let hasMoved = false;\n\n      for (let column = 0; column < 4; column++) {\n        const valuesOfColumn = [];\n\n        for (let row = 3; row >= 0; row--) {\n          if (this.boardState[row][column] !== 0) {\n            valuesOfColumn.push(this.boardState[row][column]);\n          }\n        }\n\n        for (let i = 0; i < valuesOfColumn.length; i++) {\n          if (valuesOfColumn[i] === valuesOfColumn[i + 1]) {\n            valuesOfColumn[i] *= 2;\n            valuesOfColumn[i + 1] = 0;\n            this.currentScore += valuesOfColumn[i];\n            hasMoved = true;\n          }\n        }\n\n        const newColumn = valuesOfColumn.filter((value) => value !== 0);\n\n        while (newColumn.length < 4) {\n          newColumn.push(0);\n        }\n\n        for (let row = 0; row < 4; row++) {\n          if (this.boardState[row][column] !== newColumn[3 - row]) {\n            this.boardState[row][column] = newColumn[3 - row];\n            hasMoved = true;\n          }\n        }\n      }\n\n      if (hasMoved) {\n        this.addTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveLeft() {\n    if (this.currentStatus === this.gameStatus.playing) {\n      let hasMoved = false;\n\n      for (let row = 0; row < 4; row++) {\n        const valuesOfRows = [];\n\n        for (let column = 0; column < 4; column++) {\n          if (this.boardState[row][column] !== 0) {\n            valuesOfRows.push(this.boardState[row][column]);\n          }\n        }\n\n        for (let i = 0; i < valuesOfRows.length; i++) {\n          if (valuesOfRows[i] === valuesOfRows[i + 1]) {\n            valuesOfRows[i] *= 2;\n            valuesOfRows[i + 1] = 0;\n            this.currentScore += valuesOfRows[i];\n            hasMoved = true;\n          }\n        }\n\n        const newRow = valuesOfRows.filter((value) => value !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        for (let column = 0; column < 4; column++) {\n          if (this.boardState[row][column] !== newRow[column]) {\n            this.boardState[row][column] = newRow[column];\n            hasMoved = true;\n          }\n        }\n      }\n\n      if (hasMoved) {\n        this.addTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.currentStatus === this.gameStatus.playing) {\n      let hasMoved = false;\n\n      for (let row = 0; row < 4; row++) {\n        const valuesOfRows = [];\n\n        for (let column = 3; column >= 0; column--) {\n          if (this.boardState[row][column] !== 0) {\n            valuesOfRows.push(this.boardState[row][column]);\n          }\n        }\n\n        for (let i = 0; i < valuesOfRows.length; i++) {\n          if (valuesOfRows[i] === valuesOfRows[i + 1]) {\n            valuesOfRows[i] *= 2;\n            valuesOfRows[i + 1] = 0;\n            this.currentScore += valuesOfRows[i];\n            hasMoved = true;\n          }\n        }\n\n        const newRow = valuesOfRows.filter((value) => value !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        for (let column = 0; column < 4; column++) {\n          if (this.boardState[row][column] !== newRow[3 - column]) {\n            this.boardState[row][column] = newRow[3 - column];\n            hasMoved = true;\n          }\n        }\n      }\n\n      if (hasMoved) {\n        this.addTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  getScore() {\n    return this.currentScore;\n  }\n\n  getState() {\n    return this.boardState;\n  }\n\n  getStatus() {\n    return this.currentStatus;\n  }\n\n  start() {\n    this.currentStatus = this.gameStatus.playing;\n    this.addTile();\n    this.addTile();\n  }\n\n  restart() {\n    this.currentStatus = this.gameStatus.idle;\n    this.boardState = this.initialState.map((row) => row.slice());\n    this.currentScore = 0;\n  }\n\n  addTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.boardState[row][column] === 0) {\n          emptyTiles.push([row, column]);\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const [randomRow, randomColumn] =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.boardState[randomRow][randomColumn] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkStatus() {\n    let hasMoves = false;\n    let hasEmptyTiles = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.boardState[row][column] === 2048) {\n          this.currentStatus = this.gameStatus.win;\n\n          return;\n        }\n\n        if (this.boardState[row][column] === 0) {\n          hasEmptyTiles = true;\n        }\n\n        if (\n          (row < 3 &&\n            this.boardState[row][column] ===\n              this.boardState[row + 1][column]) ||\n          (column < 3 &&\n            this.boardState[row][column] === this.boardState[row][column + 1])\n        ) {\n          hasMoves = true;\n        }\n      }\n    }\n\n    if (!hasEmptyTiles && !hasMoves) {\n      this.currentStatus = this.gameStatus.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","gameStatus","idle","playing","win","lose","constructor","initialState","boardState","map","row","slice","currentStatus","currentScore","moveUp","hasMoved","column","valuesOfColumn","push","i","length","newColumn","filter","value","addTile","checkStatus","moveDown","moveLeft","valuesOfRows","newRow","moveRight","getScore","getState","getStatus","start","restart","emptyTiles","randomRow","randomColumn","Math","floor","random","hasMoves","hasEmptyTiles","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$scoreDisplay","$09e991522ca7e64e$var$updateScoreDisplay","textContent","$09e991522ca7e64e$var$updateGameField","innerHTML","state","tableRow","createElement","tableCell","cellValue","classList","add","appendChild","addEventListener","remove","e","key"],"version":3,"file":"index.f18a68c2.js.map"}